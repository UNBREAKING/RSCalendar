'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonIcon = exports.BUTTON_TYPES = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Spinner = require('./Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Button = function (_Component) {
  (0, _inherits3.default)(Button, _Component);

  function Button() {
    (0, _classCallCheck3.default)(this, Button);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Button.__proto__ || (0, _getPrototypeOf2.default)(Button)).call(this));

    _this.onClick = _this.onClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Button, [{
    key: 'onClick',
    value: function onClick(e) {
      // Safari, FF to trigger focus event on click
      this.node.focus();
      var onClick = this.props.onClick;

      if (onClick) onClick(e);
    }
  }, {
    key: 'renderIcon',
    value: function renderIcon(iconSize, inv) {
      var _props = this.props,
          icon = _props.icon,
          iconAlign = _props.iconAlign,
          type = _props.type;

      var inverse = inv || /\-?inverse$/.test(type);
      return _react2.default.createElement(ButtonIcon, { icon: icon, align: iconAlign, size: iconSize, inverse: inverse });
    }
  }, {
    key: 'renderIconMore',
    value: function renderIconMore() {
      var _props2 = this.props,
          iconMore = _props2.iconMore,
          icon = _props2.icon,
          iconAlign = _props2.iconAlign,
          label = _props2.label,
          children = _props2.children;

      var adjoining = icon && (iconAlign === 'right' || !(label || children));
      var iconMoreSize = this.props.iconMoreSize || adjoining ? 'x-small' : 'small';
      return _react2.default.createElement(ButtonIcon, { icon: iconMore, align: 'right', size: iconMoreSize });
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames,
          _this2 = this;

      var _props3 = this.props,
          className = _props3.className,
          type = _props3.type,
          size = _props3.size,
          icon = _props3.icon,
          iconAlign = _props3.iconAlign,
          iconMore = _props3.iconMore,
          selected = _props3.selected,
          alt = _props3.alt,
          label = _props3.label,
          loading = _props3.loading,
          iconSize = _props3.iconSize,
          inverse = _props3.inverse,
          _props3$htmlType = _props3.htmlType,
          htmlType = _props3$htmlType === undefined ? 'button' : _props3$htmlType,
          children = _props3.children,
          buttonRef = _props3.buttonRef,
          props = (0, _objectWithoutProperties3.default)(_props3, ['className', 'type', 'size', 'icon', 'iconAlign', 'iconMore', 'selected', 'alt', 'label', 'loading', 'iconSize', 'inverse', 'htmlType', 'children', 'buttonRef']);

      delete props.inverse;
      var typeClassName = type ? 'slds-button--' + type : null;
      var btnClassNames = (0, _classnames3.default)(className, 'slds-button', typeClassName, (_classnames = {
        'slds-is-selected': selected
      }, (0, _defineProperty3.default)(_classnames, 'slds-button--' + size, size && !/^icon-/.test(type)), (0, _defineProperty3.default)(_classnames, 'slds-button--icon-' + size, /^(x-small|small)$/.test(size) && /^icon-/.test(type)), _classnames));

      delete props.component;
      delete props.items;

      return _react2.default.createElement(
        'button',
        (0, _extends3.default)({
          ref: function ref(node) {
            _this2.node = node;
            if (buttonRef) buttonRef(node);
          },
          className: btnClassNames,
          type: htmlType
        }, props, {
          onClick: this.onClick
        }),
        icon && iconAlign !== 'right' ? this.renderIcon(iconSize, inverse) : null,
        children || label,
        icon && iconAlign === 'right' ? this.renderIcon(iconSize, inverse) : null,
        iconMore ? this.renderIconMore() : null,
        alt ? _react2.default.createElement(
          'span',
          { className: 'slds-assistive-text' },
          alt
        ) : null,
        loading ? _react2.default.createElement(_Spinner2.default, null) : null
      );
    }
  }]);
  return Button;
}(_react.Component);

exports.default = Button;
var BUTTON_TYPES = exports.BUTTON_TYPES = ['neutral', 'brand', 'destructive', 'inverse', 'icon-bare', 'icon-container', 'icon-inverse', 'icon-more', 'icon-border', 'icon-border-filled'];

var BUTTON_SIZES = ['x-small', 'small', 'medium', 'large'];

var ICON_SIZES = ['x-small', 'small', 'medium', 'large'];

var ICON_ALIGNS = ['left', 'right'];

Button.propTypes = {
  className: _react.PropTypes.string,
  label: _react.PropTypes.node,
  alt: _react.PropTypes.string,
  type: _react.PropTypes.oneOf(BUTTON_TYPES),
  size: _react.PropTypes.oneOf(BUTTON_SIZES),
  htmlType: _react.PropTypes.string,
  selected: _react.PropTypes.bool,
  inverse: _react.PropTypes.bool,
  loading: _react.PropTypes.bool,
  icon: _react.PropTypes.string,
  iconSize: _react.PropTypes.oneOf(ICON_SIZES),
  iconAlign: _react.PropTypes.oneOf(ICON_ALIGNS),
  iconMore: _react.PropTypes.string,
  iconMoreSize: _react.PropTypes.oneOf(ICON_SIZES),
  children: _react.PropTypes.node,
  onClick: _react.PropTypes.func,
  buttonRef: _react.PropTypes.func
};

var ButtonIcon = function ButtonIcon(_ref) {
  var icon = _ref.icon,
      align = _ref.align,
      size = _ref.size,
      inverse = _ref.inverse,
      className = _ref.className,
      style = _ref.style,
      props = (0, _objectWithoutProperties3.default)(_ref, ['icon', 'align', 'size', 'inverse', 'className', 'style']);

  var alignClassName = ICON_ALIGNS.indexOf(align) >= 0 ? 'slds-button__icon--' + align : null;
  var sizeClassName = ICON_SIZES.indexOf(size) >= 0 ? 'slds-button__icon--' + size : null;
  var inverseClassName = inverse ? 'slds-button__icon--inverse' : null;
  var iconClassNames = (0, _classnames3.default)('slds-button__icon', alignClassName, sizeClassName, inverseClassName, className);
  var iconStyle = (0, _extends3.default)({}, style, { pointerEvents: 'none' });
  return _react2.default.createElement(_Icon2.default, (0, _extends3.default)({
    className: iconClassNames, icon: icon, textColor: null, style: iconStyle
  }, props));
};

exports.ButtonIcon = ButtonIcon;
ButtonIcon.propTypes = {
  className: _react.PropTypes.string,
  icon: _react.PropTypes.string,
  align: _react.PropTypes.oneOf(['left', 'right']),
  size: _react.PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),
  inverse: _react.PropTypes.bool,
  style: _react.PropTypes.object };
//# sourceMappingURL=data:application/json;base64,